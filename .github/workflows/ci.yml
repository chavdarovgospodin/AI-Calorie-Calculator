# .github/workflows/ci.yml
name: üîç CI - Code Quality & Tests

# –ö–û–ì–ê –¥–∞ —Å–µ –∏–∑–ø—ä–ª–Ω–∏ —Ç–æ–∑–∏ workflow
on:
  push:
    branches: [ main, dev, develop ]  # –ü—Ä–∏ push –≤ —Ç–µ–∑–∏ branches
  pull_request:
    branches: [ main ]                # –ü—Ä–∏ PR –∫—ä–º main

# ENVIRONMENT VARIABLES –∑–∞ —Ü–µ–ª–∏—è workflow
env:
  NODE_VERSION: '18'
  
# JOBS (–º–æ–≥–∞—Ç –¥–∞ —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞—Ç –ø–∞—Ä–∞–ª–µ–ª–Ω–æ)
jobs:
  # JOB 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Backend –∫–æ–¥–∞
  backend-checks:
    name: üèóÔ∏è Backend Checks
    runs-on: ubuntu-latest
    
    # Working directory –∑–∞ –≤—Å–∏—á–∫–∏ —Å—Ç—ä–ø–∫–∏
    defaults:
      run:
        working-directory: ./apps/backend
    
    steps:
    # –°–¢–™–ü–ö–ê 1: –í–∑–∏–º–µ –∫–æ–¥–∞ –æ—Ç repo
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    # –°–¢–™–ü–ö–ê 2: Setup Node.js
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './apps/backend/package-lock.json'
        
    # –°–¢–™–ü–ö–ê 3: –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–π dependencies
    - name: üì¶ Install Dependencies
      run: npm ci
      
    # –°–¢–™–ü–ö–ê 4: –ü—Ä–æ–≤–µ—Ä–∏ TypeScript types
    - name: üîç TypeScript Check
      run: npm run type-check
      continue-on-error: false  # –°–ø—Ä–∏ –∞–∫–æ –∏–º–∞ –≥—Ä–µ—à–∫–∞
      
    # –°–¢–™–ü–ö–ê 5: –õinting (code style –ø—Ä–æ–≤–µ—Ä–∫–∞)
    - name: üé® ESLint Check
      run: npm run lint
      
    # –°–¢–™–ü–ö–ê 6: –§–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –ø—Ä–æ–≤–µ—Ä–∫–∞
    - name: üíÖ Prettier Check
      run: npm run format:check
      
    # –°–¢–™–ü–ö–ê 7: Build –ø—Ä–æ–≤–µ—Ä–∫–∞
    - name: üèóÔ∏è Build Check
      run: npm run build
      
    # –°–¢–™–ü–ö–ê 8: –ü—É—Å–Ω–∏ unit tests
    - name: üß™ Run Tests
      run: npm run test
      env:
        # Mock environment –∑–∞ —Ç–µ—Å—Ç–æ–≤–µ—Ç–µ
        NODE_ENV: test
        SUPABASE_URL: ${{ secrets.SUPABASE_URL || 'http://localhost:3000' }}
        JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-key-for-ci' }}
        
    # –°–¢–™–ü–ö–ê 9: Test Coverage (–æ–ø—Ü–∏–æ–Ω–∞–ª–Ω–æ)
    - name: üìä Test Coverage
      run: npm run test:coverage
      continue-on-error: true  # –ù–µ —Å–ø–∏—Ä–∞ –ø—Ä–∏ –≥—Ä–µ—à–∫–∞
      
    # –°–¢–™–ü–ö–ê 10: Upload coverage reports (–∑–∞ –ø–æ-–Ω–∞–ø—Ä–µ–¥–Ω–∞–ª–º)
    - name: üìà Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./apps/backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
      continue-on-error: true

  # JOB 2: Security –ø—Ä–æ–≤–µ—Ä–∫–∏
  security-checks:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./apps/backend
        
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './apps/backend/package-lock.json'
        
    - name: üì¶ Install Dependencies
      run: npm ci
      
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∏–∑–≤–µ—Å—Ç–Ω–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    - name: üõ°Ô∏è Security Audit
      run: npm audit --audit-level moderate
      continue-on-error: true
      
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ outdated packages
    - name: üìÖ Check Outdated Packages
      run: npm outdated
      continue-on-error: true

  # JOB 3: Docker build –ø—Ä–æ–≤–µ—Ä–∫–∞
  docker-build:
    name: üê≥ Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-checks]  # –ò–∑—á–∞–∫–∞ backend-checks –¥–∞ –∑–∞–≤—ä—Ä—à–∏
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    # –¢–µ—Å—Ç–≤–∞ –¥–∞–ª–∏ Docker image —Å–µ build-–≤–∞ –ø—Ä–∞–≤–∏–ª–Ω–æ
    - name: üê≥ Build Docker Image
      run: |
        docker build -t calorie-tracker-backend:test ./apps/backend
        
    # –¢–µ—Å—Ç–≤–∞ –¥–∞–ª–∏ container —Å—Ç–∞—Ä—Ç–∏—Ä–∞
    - name: üèÉ Test Container Start
      run: |
        docker run --rm -d --name test-container \
          -e NODE_ENV=test \
          -e JWT_SECRET=test-secret \
          -p 3000:3000 \
          calorie-tracker-backend:test
        
        # –ò–∑—á–∞–∫–∞–π –º–∞–ª–∫–æ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞
        sleep 10
        
        # –¢–µ—Å—Ç–≤–∞–π health endpoint
        curl -f http://localhost:3000/health || exit 1
        
        # –°–ø—Ä–∏ container
        docker stop test-container

  # JOB 4: Notification –ø—Ä–∏ –≥—Ä–µ—à–∫–∞
  notify-on-failure:
    name: üìß Notify on Failure
    runs-on: ubuntu-latest
    needs: [backend-checks, security-checks, docker-build]
    if: failure()  # –°–∞–º–æ –∞–∫–æ –Ω—è–∫–æ–π job –µ failed
    
    steps:
    - name: üìß Send Failure Notification
      run: |
        echo "‚ùå CI Pipeline Failed!"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        
        # –¢—É–∫ –º–æ–∂–µ—à –¥–∞ –¥–æ–±–∞–≤–∏—à Discord/Slack notification
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"CI Failed for ${{ github.ref_name }}"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

# –ú–æ–∂–µ –¥–∞ –¥–æ–±–∞–≤–∏—à –∏ status badge –≤ README:
# [![CI](https://github.com/USERNAME/REPO/workflows/CI/badge.svg)](https://github.com/USERNAME/REPO/actions)