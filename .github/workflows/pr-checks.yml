name: üîÄ Pull Request Checks

# –ò–∑–ø—ä–ª–Ω—è–≤–∞ —Å–µ –°–ê–ú–û –ø—Ä–∏ Pull Requests –∫—ä–º main
on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  # Quick checks –∑–∞ PR
  pr-validation:
    name: üìã PR Validation
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # –ù—É–∂–Ω–æ –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å main

      # –ü—Ä–æ–≤–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ PR
      - name: üìè Check PR Size
        run: |
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | wc -l)
          CHANGED_LINES=$(git diff --shortstat origin/main...HEAD | grep -oE '[0-9]+ insertions|[0-9]+ deletions' | grep -oE '[0-9]+' | awk '{sum += $1} END {print sum}')

          echo "Changed files: $CHANGED_FILES"
          echo "Changed lines: $CHANGED_LINES"

          # Warning –∞–∫–æ PR –µ —Ç–≤—ä—Ä–¥–µ –≥–æ–ª—è–º
          if [ "$CHANGED_FILES" -gt 50 ] || [ "$CHANGED_LINES" -gt 1000 ]; then
            echo "‚ö†Ô∏è Large PR detected! Consider splitting into smaller PRs."
            echo "Files: $CHANGED_FILES (recommended: < 50)"
            echo "Lines: $CHANGED_LINES (recommended: < 1000)"
          fi

      # –ü—Ä–æ–≤–µ—Ä–∏ commit messages
      - name: üìù Check Commit Messages
        run: |
          echo "Checking commit messages..."
          git log --oneline origin/main..HEAD

          # –ü—Ä–æ—Å—Ça –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ conventional commits (–æ–ø—Ü–∏–æ–Ω–∞–ª–Ω–æ)
          INVALID_COMMITS=$(git log --oneline origin/main..HEAD | grep -v -E '^[a-f0-9]+ (feat|fix|docs|style|refactor|test|chore|ci)(\(.+\))?: .+' | wc -l)

          if [ "$INVALID_COMMITS" -gt 0 ]; then
            echo "‚ö†Ô∏è Some commits don't follow conventional format"
            echo "Example: 'feat: add user authentication' or 'fix(api): resolve validation bug'"
          fi

  # –ë—ä—Ä–∑–∞ code quality –ø—Ä–æ–≤–µ—Ä–∫–∞
  quick-quality-check:
    name: ‚ö° Quick Quality Check
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./apps/backend

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './apps/backend/package-lock.json'

      - name: üì¶ Install Dependencies
        run: npm ci

      # –ù–∞–π-–≤–∞–∂–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      - name: üîç TypeScript & Lint Check
        run: |
          npm run type-check
          npm run lint:check

      - name: ‚ö° Quick Build Test
        run: npm run build

  # Auto-assign reviewers
  assign-reviewers:
    name: üë• Assign Reviewers
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' # –°–∞–º–æ –ø—Ä–∏ –Ω–æ–≤–∏ PRs

    steps:
      - name: üë• Auto-assign Reviewers
        uses: actions/github-script@v6
        with:
          script: |
            const reviewers = ['your-github-username']; // –î–æ–±–∞–≤–∏ —Å–≤–æ—è username

            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              reviewers: reviewers
            });

            console.log('Assigned reviewers:', reviewers);

  # –î–æ–±–∞–≤–∏ labels –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
  auto-label:
    name: üè∑Ô∏è Auto Label
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üè∑Ô∏è Add Labels Based on Changes
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');

            // –í–∏–∂ –∫–∞–∫–≤–∏ —Ñ–∞–π–ª–æ–≤–µ —Å–∞ –ø—Ä–æ–º–µ–Ω–µ–Ω–∏
            const changedFiles = execSync('git diff --name-only origin/main...HEAD').toString().split('\n').filter(f => f);

            console.log('Changed files:', changedFiles);

            const labels = [];

            // Backend changes
            if (changedFiles.some(f => f.startsWith('apps/backend/'))) {
              labels.push('backend');
            }

            // Mobile changes
            if (changedFiles.some(f => f.startsWith('apps/mobile/'))) {
              labels.push('mobile');
            }

            // Documentation changes
            if (changedFiles.some(f => f.includes('README') || f.includes('.md'))) {
              labels.push('documentation');
            }

            // Database changes
            if (changedFiles.some(f => f.includes('migration') || f.includes('schema'))) {
              labels.push('database');
            }

            // GitHub Actions changes
            if (changedFiles.some(f => f.includes('.github/workflows'))) {
              labels.push('ci/cd');
            }

            // Size labels
            if (changedFiles.length > 30) {
              labels.push('size/large');
            } else if (changedFiles.length > 10) {
              labels.push('size/medium');
            } else {
              labels.push('size/small');
            }

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
              
              console.log('Added labels:', labels);
            }

  # PR Summary comment
  pr-summary:
    name: üìä PR Summary
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìä Generate PR Summary
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');

            // Statistics
            const changedFiles = execSync('git diff --name-only origin/main...HEAD').toString().split('\n').filter(f => f);
            const addedLines = execSync('git diff --shortstat origin/main...HEAD').toString().match(/(\d+) insertions?/)?.[1] || '0';
            const deletedLines = execSync('git diff --shortstat origin/main...HEAD').toString().match(/(\d+) deletions?/)?.[1] || '0';

            const summary = `## üìä PR Summary

            **Changes:**
            - üìÅ Files changed: ${changedFiles.length}
            - ‚ûï Lines added: ${addedLines}
            - ‚ûñ Lines deleted: ${deletedLines}

            **Modified files:**
            ${changedFiles.map(f => `- \`${f}\``).join('\n')}

            **Checklist for reviewer:**
            - [ ] Code follows project conventions
            - [ ] Tests are included (if applicable)
            - [ ] Documentation is updated (if needed)
            - [ ] No breaking changes (or properly documented)

            **Auto-checks status:** ‚è≥ Running...
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
