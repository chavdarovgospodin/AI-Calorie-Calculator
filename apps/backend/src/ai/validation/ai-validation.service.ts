import { Injectable, Logger, BadRequestException } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { GoogleGenerativeAI } from '@google/generative-ai';

export interface ValidationResult {
  isValid: boolean;
  confidence: number;
  reason?: string;
  suggestion?: string;
  detectedFoods?: string[];
}

@Injectable()
export class AiValidationService {
  private readonly logger = new Logger(AiValidationService.name);
  private genAI: GoogleGenerativeAI;

  constructor(private configService: ConfigService) {
    const apiKey = configService.get<string>('GOOGLE_AI_API_KEY');
    this.genAI = new GoogleGenerativeAI(apiKey);
  }

  /**
   * Validates if text describes food consumption in context
   */
  async validateTextFood(description: string): Promise<ValidationResult> {
    this.logger.log(`üîç Validating text for food content: "${description}"`);

    // Quick pre-validation filters
    const quickCheck = this.quickTextValidation(description);
    if (!quickCheck.isValid) {
      return quickCheck;
    }

    try {
      const model = this.genAI.getGenerativeModel({
        model: 'gemini-1.5-flash',
      });

      const prompt = `
–ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π –¥–∞–ª–∏ —Ç–æ–∑–∏ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–≤–∞ –ö–û–ù–°–£–ú–ê–¶–ò–Ø –ù–ê –•–†–ê–ù–ê –∏–ª–∏ –Ω–µ—â–æ —Å–≤—ä—Ä–∑–∞–Ω–æ —Å —Ö—Ä–∞–Ω–µ–Ω–µ.

–¢–µ–∫—Å—Ç: "${description}"

–ü–†–ê–í–ò–õ–ê –ó–ê –í–ê–õ–ò–î–ê–¶–ò–Ø:
‚úÖ –í–ê–õ–ò–î–ù–ò –ø—Ä–∏–º–µ—Ä–∏:
- "—è–¥–æ—Ö 1 —è–±—ä–ª–∫–∞"
- "–ø–∏—Ö –∫–∞—Ñ–µ"
- "–∑–∞–∫—É—Å–∏—Ö —Å 2 —Ñ–∏–ª–∏–π–∫–∏ —Ö–ª—è–±" 
- "200–≥ –ø–∏–ª–µ—à–∫–æ —Ñ–∏–ª–µ —Å –æ—Ä–∏–∑"
- "–≤–µ—á–µ—Ä—è—Ö —Å–∞–ª–∞—Ç–∞ –∏ —Ä–∏–±–∞"
- "–∏–∑–ø–∏—Ö —á–∞—à–∞ –º–ª—è–∫–æ"
- "—Ö–∞–ø–Ω–∞—Ö —Å–∞–Ω–¥–≤–∏—á"
- "1 —è–±—ä–ª–∫–∞" (–ø—Ä–æ—Å—Ço –æ–ø–∏—Å–∞–Ω–∏–µ)
- "200–≥ —Ä–∏–±–∞" (—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
- "–∫–∞—Ñ–µ —Å –º–ª—è–∫–æ" (—Ö—Ä–∞–Ω–∞/–Ω–∞–ø–∏—Ç–∫–∞)

‚ùå –ù–ï–í–ê–õ–ò–î–ù–ò –ø—Ä–∏–º–µ—Ä–∏:
- "–∑–¥—Ä–∞–≤–µ–π", "–¥–æ–±—Ä–æ —É—Ç—Ä–æ" 
- "–∫–æ–ª–∫–æ –µ —á–∞—Å—ä—Ç", "–∫–æ–≥–∞ –µ"
- "–∫–∞–∫ –¥–∞ –æ—Ç—Å–ª–∞–±–Ω–∞"
- "–¥–∞–π –º–∏ —Ä–µ—Ü–µ–ø—Ç–∞"
- "–∫–æ–∏ —Å–∞ –Ω–∞–π-–∑–¥—Ä–∞–≤–æ—Å–ª–æ–≤–Ω–∏—Ç–µ —Ö—Ä–∞–Ω–∏"
- "–ø–æ–º–æ—â", "info"
- "–∫—ä–¥–µ –º–æ–≥–∞ –¥–∞ –∫—É–ø—è"
- "–ø—Ä–µ–ø–æ—Ä—ä—á–∞–π –º–∏ –¥–∏–µ—Ç–∞"

–§–û–ö–£–°: –¢—ä—Ä—Å–∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ö—Ä–∞–Ω–∞ (—Å –≥–ª–∞–≥–æ–ª–∏ –∑–∞ –∫–æ–Ω—Å—É–º–∞—Ü–∏—è –ò–õ–ò –ø—Ä–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ö—Ä–∞–Ω–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)

–í—ä—Ä–Ω–∏ –°–ê–ú–û JSON:
{
  "isFood": boolean,
  "confidence": number (0-100),
  "reason": "–∫—Ä–∞—Ç–∫–æ –æ–±—è—Å–Ω–µ–Ω–∏–µ",
  "suggestion": "—Å—ä–≤–µ—Ç –∞–∫–æ –Ω–µ –µ —Ö—Ä–∞–Ω–∞ (optional)",
  "detectedFoods": ["—Ö—Ä–∞–Ω–∞1", "—Ö—Ä–∞–Ω–∞2"] (optional)
}
      `;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();

      // Extract JSON from response
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        this.logger.warn('AI returned invalid JSON for text validation');
        return this.fallbackTextValidation(description);
      }

      const aiResult = JSON.parse(jsonMatch[0]);

      return {
        isValid: aiResult.isFood,
        confidence: aiResult.confidence / 100,
        reason: aiResult.reason,
        suggestion: aiResult.suggestion,
        detectedFoods: aiResult.detectedFoods || [],
      };
    } catch (error) {
      this.logger.error(`Text validation failed: ${error.message}`);
      return this.fallbackTextValidation(description);
    }
  }

  /**
   * Validates if image contains food
   */
  async validateImageFood(imageBase64: string): Promise<ValidationResult> {
    this.logger.log(`üì∏ Validating image for food content`);

    try {
      const model = this.genAI.getGenerativeModel({
        model: 'gemini-1.5-flash',
      });

      const prompt = `
–ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π —Ç–∞–∑–∏ —Å–Ω–∏–º–∫–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –¥–∞–ª–∏ —Å—ä–¥—ä—Ä–∂–∞ –•–†–ê–ù–ê –∫–æ—è—Ç–æ –º–æ–∂–µ –¥–∞ —Å–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞ –∑–∞ –∫–∞–ª–æ—Ä–∏–∏.

–ü–†–ê–í–ò–õ–ê –ó–ê –í–ê–õ–ò–î–ê–¶–ò–Ø:
‚úÖ –í–ê–õ–ò–î–ù–ò —Å–Ω–∏–º–∫–∏:
- –ß–∏–Ω–∏—è —Å —è—Å—Ç–∏–µ/—Ö—Ä–∞–Ω–∞
- –û—Ç–¥–µ–ª–Ω–∏ —Ö—Ä–∞–Ω–∏ (–ø–ª–æ–¥–æ–≤–µ, –∑–µ–ª–µ–Ω—á—É—Ü–∏)
- –ù–∞–ø–∏—Ç–∫–∏ –≤ —á–∞—à–∏/–±—É—Ç–∏–ª–∫–∏
- –°–∞–Ω–¥–≤–∏—á–∏, –∑–∞–∫—É—Å–∫–∏
- –ì–æ—Ç–æ–≤–∏ —è—Å—Ç–∏—è
- –ü–∞–∫–µ—Ç–∏—Ä–∞–Ω–∏ —Ö—Ä–∞–Ω–∏

‚ùå –ù–ï–í–ê–õ–ò–î–ù–ò —Å–Ω–∏–º–∫–∏:
- –•–æ—Ä–∞, —Å–µ–ª—Ñ–∏—Ç–∞
- –ü–µ–π–∑–∞–∂–∏, –ø—Ä–∏—Ä–æ–¥–∞
- –ñ–∏–≤–æ—Ç–Ω–∏, –∫–æ—Ç–∫–∏, –∫—É—á–µ—Ç–∞
- –ü—Ä–µ–¥–º–µ—Ç–∏ (–º–∞—Å–∏, —Å—Ç–æ–ª–æ–≤–µ)
- –¢–µ–∫—Å—Ç, –¥–æ–∫—É–º–µ–Ω—Ç–∏
- –†–∞–∑–º–∞–∑–∞–Ω–∏/–Ω–µ—è—Å–Ω–∏ —Å–Ω–∏–º–∫–∏
- –†–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏ –æ—Ç–≤—ä–Ω (–±–µ–∑ —Ö—Ä–∞–Ω–∞)
- –ö—É—Ö–Ω–∏ (–±–µ–∑ –≤–∏–¥–∏–º–∞ —Ö—Ä–∞–Ω–∞)

–í—ä—Ä–Ω–∏ –°–ê–ú–û JSON:
{
  "isFood": boolean,
  "confidence": number (0-100),
  "reason": "–∫–∞–∫–≤–æ –≤–∏–∂–¥–∞—à –Ω–∞ —Å–Ω–∏–º–∫–∞—Ç–∞",
  "suggestion": "—Å—ä–≤–µ—Ç –∞–∫–æ –Ω–µ –µ —Ö—Ä–∞–Ω–∞ (optional)",
  "detectedFoods": ["—Ö—Ä–∞–Ω–∞1", "—Ö—Ä–∞–Ω–∞2"] (optional)
}
      `;

      const imagePart = {
        inlineData: {
          data: imageBase64,
          mimeType: 'image/jpeg',
        },
      };

      const result = await model.generateContent([prompt, imagePart]);
      const response = await result.response;
      const text = response.text();

      // Extract JSON from response
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        this.logger.warn('AI returned invalid JSON for image validation');
        return {
          isValid: false,
          confidence: 0.5,
          reason: '–ù–µ –º–æ–≥–∞ –¥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–º —Å–Ω–∏–º–∫–∞—Ç–∞ –ø—Ä–∞–≤–∏–ª–Ω–æ',
          suggestion: '–ú–æ–ª—è –Ω–∞–ø—Ä–∞–≤–µ—Ç–µ –ø–æ-—è—Å–Ω–∞ —Å–Ω–∏–º–∫–∞ –Ω–∞ —Ö—Ä–∞–Ω–∞',
        };
      }

      const aiResult = JSON.parse(jsonMatch[0]);

      return {
        isValid: aiResult.isFood,
        confidence: aiResult.confidence / 100,
        reason: aiResult.reason,
        suggestion: aiResult.suggestion,
        detectedFoods: aiResult.detectedFoods || [],
      };
    } catch (error) {
      this.logger.error(`Image validation failed: ${error.message}`);
      return {
        isValid: false,
        confidence: 0.3,
        reason: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Å–Ω–∏–º–∫–∞—Ç–∞',
        suggestion: '–ú–æ–ª—è –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ —Å —è—Å–Ω–∞ —Å–Ω–∏–º–∫–∞ –Ω–∞ —Ö—Ä–∞–Ω–∞',
      };
    }
  }

  /**
   * Quick text validation using keywords and patterns
   */
  private quickTextValidation(text: string): ValidationResult {
    const lowerText = text.toLowerCase().trim();

    // Empty or too short
    if (lowerText.length < 2) {
      return {
        isValid: false,
        confidence: 0.9,
        reason: '–¢–≤—ä—Ä–¥–µ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ',
        suggestion: '–ú–æ–ª—è –æ–ø–∏—à–µ—Ç–µ –∫–∞–∫–≤–æ —Å—Ç–µ —è–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: "—è–¥–æ—Ö 1 —è–±—ä–ª–∫–∞"',
      };
    }

    // Common non-food patterns (more strict)
    const nonFoodPatterns = [
      /^(–∑–¥—Ä–∞–≤–µ–π|–∑–¥—Ä–∞—Å—Ç–∏|—Ö–µ–π|–¥–æ–±—ä—Ä|–ª–µ–∫|–ø—Ä–∏—è—Ç–µ–Ω)/,
      /^(–∫–æ–ª–∫–æ|–∫–æ–≥–∞|–∫—ä–¥–µ|–∫–∞–∫|–∑–∞—â–æ|–∫–æ–π|–∫–æ—è|–∫–æ–µ)/,
      /^(–ø–æ–º–æ—â|help|info|–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)/,
      /^(–¥–∞–π\s+(–º–∏|–ø—Ä–µ–ø–æ—Ä—ä–∫–∞|—Å—ä–≤–µ—Ç))/,
      /^(–ø—Ä–µ–ø–æ—Ä—ä—á–∞–π|–ø—Ä–µ–¥–ª–æ–∂–∏|–∫–∞–∂–∏\s+–º–∏)/,
      /^(—Ç—ä—Ä—Å—è|–∏—Å–∫–∞–º\s+(–¥–∞\s+–∑–Ω–∞–º|–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è|–ø–æ–º–æ—â))/,
      /(—á–∞—Å—ä—Ç|–≤—Ä–µ–º–µ—Ç–æ|–¥–Ω–µ—Å|—É—Ç—Ä–µ|–≤—á–µ—Ä–∞|—Å–µ–¥–º–∏—Ü–∞)/,
      /(—Ä–µ—Ü–µ–ø—Ç–∞|–¥–∏–µ—Ç–∞|–ø–ª–∞–Ω\s+–∑–∞\s+—Ö—Ä–∞–Ω–µ–Ω–µ)/,
      /(–∫—ä–¥–µ\s+(–º–æ–≥–∞|–¥–∞\s+–∫—É–ø—è|–∏–º–∞))/,
      /(–Ω–∞–π-–¥–æ–±—Ä|–Ω–∞–π-–∑–¥—Ä–∞–≤–æ—Å–ª–æ–≤–Ω|–Ω–∞–π-–ø–æ–¥—Ö–æ–¥—è—â)/,
    ];

    for (const pattern of nonFoodPatterns) {
      if (pattern.test(lowerText)) {
        return {
          isValid: false,
          confidence: 0.9,
          reason:
            '–¢–æ–≤–∞ –∏–∑–≥–ª–µ–∂–¥–∞ –∫–∞—Ç–æ –≤—ä–ø—Ä–æ—Å –∏–ª–∏ –∑–∞—è–≤–∫–∞, –Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Å—É–º–∏—Ä–∞–Ω–∞ —Ö—Ä–∞–Ω–∞',
          suggestion:
            '–í–º–µ—Å—Ç–æ —Ç–æ–≤–∞ –æ–ø–∏—à–µ—Ç–µ –∫–∞–∫–≤–æ —Å—Ç–µ —è–ª–∏: "—è–¥–æ—Ö —Å–∞–ª–∞—Ç–∞ —Å –¥–æ–º–∞—Ç–∏" –∏–ª–∏ "–ø–∏—Ö –∫–∞—Ñ–µ"',
        };
      }
    }

    // Look for consumption verbs (Bulgarian)
    const consumptionVerbs = [
      '—è–¥–æ—Ö',
      '–∏–∑—è–¥–æ—Ö',
      '–ø–∏—Ö',
      '–∏–∑–ø–∏—Ö',
      '–∫–æ–Ω—Å—É–º–∏—Ä–∞—Ö',
      '–∑–∞–∫—É—Å–∏—Ö',
      '–æ–±—è–¥–≤–∞—Ö',
      '–≤–µ—á–µ—Ä—è—Ö',
      '—Ö–∞–ø–Ω–∞—Ö',
      '–ø–æ—Ö–∞–ø–Ω–∞—Ö',
      '–≤–∑–µ—Ö',
      '–æ–ø–∏—Ç–∞—Ö',
      '–≤–∫—É—Å–∏—Ö',
      '–∏–∑–ø–∏—Ö',
      '–ø–æ–¥—Ö—Ä–∞–Ω–≤–∞—Ö',
    ];

    const hasConsumptionVerb = consumptionVerbs.some((verb) =>
      lowerText.includes(verb)
    );
    if (hasConsumptionVerb) {
      return { isValid: true, confidence: 0.9 };
    }

    // Common food keywords - allow simple food descriptions
    const foodKeywords = [
      '—Ö–ª—è–±',
      '–º–µ—Å–æ',
      '—Ä–∏–±–∞',
      '–ø–∏–ª–µ',
      '–ø–∏–ª–µ—à–∫–æ',
      '–æ—Ä–∏–∑',
      '–∫–∞—Ä—Ç–æ—Ñ–∏',
      '—Å–∞–ª–∞—Ç–∞',
      '–ø–ª–æ–¥',
      '–∑–µ–ª–µ–Ω—á—É–∫',
      '–∫–∞—Ñ–µ',
      '—á–∞–π',
      '–º–ª—è–∫–æ',
      '—Å–∏—Ä–µ–Ω–µ',
      '—è–π—Ü–µ',
      '–ø–∞—Å—Ç–∞',
      '—Å—É–ø–∞',
      '—Ç–æ—Ä—Ç–∞',
      '–±–∏—Å–∫–≤–∏—Ç–∞',
      '—à–æ–∫–æ–ª–∞–¥',
      '—è–±—ä–ª–∫–∞',
      '–±–∞–Ω–∞–Ω',
      '–¥–æ–º–∞—Ç–∏',
      '–∫—Ä–∞—Å—Ç–∞–≤–∏—Ü–∏',
      '–º–æ—Ä–∫–æ–≤',
      '–ª—É–∫',
      '—á—É—à–∫–∞',
      '—Å–ø–∞–Ω–∞–∫',
    ];

    const hasKeyword = foodKeywords.some((keyword) =>
      lowerText.includes(keyword)
    );

    // If has food keyword, check context
    if (hasKeyword) {
      // Check if it looks like a question about the food rather than consumption
      if (
        lowerText.includes('?') ||
        lowerText.startsWith('–∫–∞–∫–≤–æ') ||
        lowerText.startsWith('–∫–æ–∏')
      ) {
        return {
          isValid: false,
          confidence: 0.8,
          reason: '–ò–∑–≥–ª–µ–∂–¥–∞ –∫–∞—Ç–æ –≤—ä–ø—Ä–æ—Å –∑–∞ —Ö—Ä–∞–Ω–∞, –Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Å—É–º–∞—Ü–∏—è',
          suggestion:
            '–û–ø–∏—à–µ—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∫–∞–∫–≤–æ —Å—Ç–µ —è–ª–∏: "—è–¥–æ—Ö 200–≥ –æ—Ä–∏–∑ —Å –ø–∏–ª–µ—à–∫–æ"',
        };
      }

      // Allow simple food descriptions like "1 —è–±—ä–ª–∫–∞", "200–≥ —Ä–∏–±–∞"
      if (
        /\d+\s*(–≥|–≥—Ä–∞–º|–º–ª|ml|–≥—Ä|–±—Ä|–±—Ä–æ—è|—á–∞—à–∏|—á–∞—à–∞|—Ñ–∏–ª–∏–∏|—Ñ–∏–ª–∏—è)/.test(
          lowerText
        ) ||
        /^\d+\s+[–∞-—è—ë]+/.test(lowerText)
      ) {
        return { isValid: true, confidence: 0.9 }; // High confidence for clear food + quantity
      }

      return { isValid: true, confidence: 0.8 }; // Still high for food keywords
    }

    // Numbers + units could indicate food portions
    if (
      /\d+\s*(–≥|–≥—Ä–∞–º|–º–ª|ml|–≥—Ä|–±—Ä|–±—Ä–æ—è|—á–∞—à–∏|—á–∞—à–∞|—Ñ–∏–ª–∏–∏|—Ñ–∏–ª–∏—è)/.test(lowerText)
    ) {
      return { isValid: true, confidence: 0.85 }; // High confidence for units
    }

    // Simple patterns like "1 —è–±—ä–ª–∫–∞", "2 –±–∞–Ω–∞–Ω–∞" - very clear food descriptions
    if (/^\d+\s+[–∞-—è—ë]+/.test(lowerText)) {
      return { isValid: true, confidence: 0.9 }; // Very high confidence
    }

    // Default - require AI validation for edge cases
    return { isValid: true, confidence: 0.4 };
  }

  /**
   * Fallback validation when AI fails
   */
  private fallbackTextValidation(text: string): ValidationResult {
    const quickResult = this.quickTextValidation(text);
    if (!quickResult.isValid) {
      return quickResult;
    }

    // Conservative approach - allow but with low confidence
    return {
      isValid: true,
      confidence: 0.5,
      reason: '–ë–∞–∑–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–µ –º–æ–∂–∞—Ö –¥–∞ –ø–æ—Ç–≤—ä—Ä–¥—è —Å—ä—Å AI',
      suggestion:
        '–ó–∞ –ø–æ-–¥–æ–±—Ä–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –æ–ø–∏—à–µ—Ç–µ —Ö—Ä–∞–Ω–∞—Ç–∞ –ø–æ-—è—Å–Ω–æ —Å –≥–ª–∞–≥–æ–ª: "—è–¥–æ—Ö...", "–ø–∏—Ö..."',
    };
  }

  /**
   * Creates user-friendly error message
   */
  createValidationError(validation: ValidationResult): BadRequestException {
    const message = validation.reason || '–ù–µ–≤–∞–ª–∏–¥–µ–Ω –≤—Ö–æ–¥ –∑–∞ —Ö—Ä–∞–Ω–∞';
    const suggestion =
      validation.suggestion || '–ú–æ–ª—è –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ö—Ä–∞–Ω–∞';

    return new BadRequestException({
      error: 'INVALID_FOOD_INPUT',
      message,
      suggestion,
      confidence: Math.round(validation.confidence * 100),
      detectedFoods: validation.detectedFoods || [],
    });
  }
}
