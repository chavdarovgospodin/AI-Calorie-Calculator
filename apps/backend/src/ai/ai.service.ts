import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { NutritionAnalysis } from './interfaces/nutrition-analysis.interface';

@Injectable()
export class AiService {
  private readonly logger = new Logger(AiService.name);
  private genAI: GoogleGenerativeAI;

  constructor(private configService: ConfigService) {
    const apiKey = configService.get<string>('GOOGLE_AI_API_KEY');
    
    if (!apiKey) {
      this.logger.error('Google AI API key is missing in environment variables');
      throw new Error('GOOGLE_AI_API_KEY is required');
    }

    try {
      this.genAI = new GoogleGenerativeAI(apiKey);
      this.logger.log('‚úÖ Google AI service initialized successfully');
    } catch (error) {
      this.logger.error('‚ùå Failed to initialize Google AI service:', error);
      throw error;
    }
  }

  async analyzeTextFood(description: string): Promise<NutritionAnalysis> {
    const startTime = Date.now();
    this.logger.log(`üîç Analyzing food text: "${description}"`);

    const model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

    const prompt = `
    –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π —Å–ª–µ–¥–Ω–æ—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ö—Ä–∞–Ω–∞ –∏ –¥–∞–π –¥–µ—Ç–∞–π–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏.
    –í—ä—Ä–Ω–∏ –°–ê–ú–û JSON –æ–±–µ–∫—Ç —Å —Ç–æ—á–Ω–æ —Ç–∞–∑–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–±–µ–∑ markdown, –±–µ–∑ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–µ–Ω —Ç–µ–∫—Å—Ç):

    {
      "totalCalories": number,
      "protein": number,
      "carbs": number,
      "fat": number,
      "fiber": number,
      "sugar": number,
      "sodium": number,
      "foods": [
        {
          "name": "–∏–º–µ –Ω–∞ —Ö—Ä–∞–Ω–∞—Ç–∞",
          "quantity": "–ø—Ä–µ—Ü–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
          "calories": number,
          "protein": number,
          "carbs": number,
          "fat": number
        }
      ]
    }

    –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ö—Ä–∞–Ω–∞—Ç–∞: "${description}"

    –í–∞–∂–Ω–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
    - –ê–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ç–∞ –Ω–µ —Å–∞ –ø–æ—Å–æ—á–µ–Ω–∏, –ø—Ä–µ—Ü–µ–Ω—è–≤–∞–π —Ä–∞–∑—É–º–Ω–∏ –ø–æ—Ä—Ü–∏–∏
    - –í—Å–∏—á–∫–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–∞ —á–∏—Å–ª–∞ (–Ω–µ strings)
    - –§–∏–±—Ä–∏ –≤ –≥—Ä–∞–º–æ–≤–µ, –Ω–∞—Ç—Ä–∏–π –≤ –º–∏–ª–∏–≥—Ä–∞–º–∏
    - –ó–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏ —Ö—Ä–∞–Ω–∏ –∏–∑–ø–æ–ª–∑–≤–∞–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏ —Ä–µ—Ü–µ–ø—Ç–∏
    - –ë—ä–¥–∏ –º–∞–∫—Å–∏–º–∞–ª–Ω–æ —Ç–æ—á–µ–Ω —Å —Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
    - –ê–∫–æ –∏–º–∞ –Ω—è–∫–æ–ª–∫–æ —Ö—Ä–∞–Ω–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–π –≤—Å—è–∫–∞ –ø–æ–æ—Ç–¥–µ–ª–Ω–æ
    `;

    try {
      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      this.logger.debug(`AI Response: ${text}`);
      
      // Extract JSON from response
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No valid JSON found in AI response');
      }

      const analysis: NutritionAnalysis = JSON.parse(jsonMatch[0]);
      
      // Validate the response structure
      this.validateNutritionAnalysis(analysis);
      
      const processingTime = Date.now() - startTime;
      this.logger.log(`‚úÖ Food analysis completed: ${analysis.totalCalories} calories (${processingTime}ms)`);
      
      return analysis;
    } catch (error) {
      const processingTime = Date.now() - startTime;
      this.logger.error(`‚ùå Text food analysis failed after ${processingTime}ms: ${error.message}`);
      
      if (error.message.includes('JSON')) {
        throw new Error('AI returned invalid response format');
      }
      if (error.message.includes('API key')) {
        throw new Error('Invalid Google AI API key');
      }
      if (error.message.includes('quota')) {
        throw new Error('AI service quota exceeded');
      }
      
      throw new Error('Failed to analyze food description');
    }
  }

  async analyzeImageFood(imageBase64: string): Promise<NutritionAnalysis> {
    const startTime = Date.now();
    this.logger.log(`üì∏ Analyzing food image (${Math.round(imageBase64.length / 1024)}KB)`);

    const model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

    const prompt = `
    –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π —Ç–∞–∑–∏ —Å–Ω–∏–º–∫–∞ –Ω–∞ —Ö—Ä–∞–Ω–∞ –∏ –¥–∞–π –¥–µ—Ç–∞–π–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏.
    –í—ä—Ä–Ω–∏ –°–ê–ú–û JSON –æ–±–µ–∫—Ç —Å —Ç–æ—á–Ω–æ —Ç–∞–∑–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–±–µ–∑ markdown, –±–µ–∑ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–µ–Ω —Ç–µ–∫—Å—Ç):

    {
      "totalCalories": number,
      "protein": number,
      "carbs": number,
      "fat": number,
      "fiber": number,
      "sugar": number,
      "sodium": number,
      "foods": [
        {
          "name": "–∏–º–µ –Ω–∞ —Ö—Ä–∞–Ω–∞—Ç–∞",
          "quantity": "–ø—Ä–µ—Ü–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
          "calories": number,
          "protein": number,
          "carbs": number,
          "fat": number
        }
      ]
    }

    –í–∞–∂–Ω–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
    - –ü—Ä–µ—Ü–µ–Ω—è–≤–∞–π —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ü–∏–∏—Ç–µ –≤—ä–∑ –æ—Å–Ω–æ–≤–∞ –Ω–∞ —Å–Ω–∏–º–∫–∞—Ç–∞
    - –í—Å–∏—á–∫–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–∞ —á–∏—Å–ª–∞ (–Ω–µ strings)
    - –ê–∫–æ –≤–∏–∂–¥–∞—à –Ω—è–∫–æ–ª–∫–æ —Ö—Ä–∞–Ω–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–π –≤—Å—è–∫–∞ –ø–æ–æ—Ç–¥–µ–ª–Ω–æ
    - –ë—ä–¥–∏ –º–∞–∫—Å–∏–º–∞–ª–Ω–æ —Ç–æ—á–µ–Ω —Å —Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
    - –§–∏–±—Ä–∏ –≤ –≥—Ä–∞–º–æ–≤–µ, –Ω–∞—Ç—Ä–∏–π –≤ –º–∏–ª–∏–≥—Ä–∞–º–∏
    - –ê–∫–æ –Ω–µ –º–æ–∂–µ—à –¥–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞–µ—à —Ö—Ä–∞–Ω–∞—Ç–∞, –∫–∞–∂ —Ç–æ–≤–∞ —á–µ—Å—Ç–Ω–æ
    `;

    try {
      const result = await model.generateContent([
        prompt,
        {
          inlineData: {
            data: imageBase64,
            mimeType: 'image/jpeg',
          },
        },
      ]);

      const response = await result.response;
      const text = response.text();
      
      this.logger.debug(`AI Image Response: ${text}`);
      
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No valid JSON found in AI response');
      }

      const analysis: NutritionAnalysis = JSON.parse(jsonMatch[0]);
      
      // Validate the response structure
      this.validateNutritionAnalysis(analysis);
      
      const processingTime = Date.now() - startTime;
      this.logger.log(`‚úÖ Image analysis completed: ${analysis.totalCalories} calories (${processingTime}ms)`);
      
      return analysis;
    } catch (error) {
      const processingTime = Date.now() - startTime;
      this.logger.error(`‚ùå Image food analysis failed after ${processingTime}ms: ${error.message}`);
      
      if (error.message.includes('JSON')) {
        throw new Error('AI returned invalid response format');
      }
      if (error.message.includes('API key')) {
        throw new Error('Invalid Google AI API key');
      }
      if (error.message.includes('quota')) {
        throw new Error('AI service quota exceeded');
      }
      
      throw new Error('Failed to analyze food image');
    }
  }

  private validateNutritionAnalysis(analysis: any): void {
    const requiredFields = ['totalCalories', 'protein', 'carbs', 'fat', 'foods'];
    
    for (const field of requiredFields) {
      if (analysis[field] === undefined || analysis[field] === null) {
        throw new Error(`Missing required field: ${field}`);
      }
    }

    // Validate numeric fields
    const numericFields = ['totalCalories', 'protein', 'carbs', 'fat'];
    for (const field of numericFields) {
      if (typeof analysis[field] !== 'number' || analysis[field] < 0) {
        throw new Error(`Invalid ${field}: must be a positive number`);
      }
    }

    // Validate foods array
    if (!Array.isArray(analysis.foods)) {
      throw new Error('Foods must be an array');
    }

    // Validate each food item
    analysis.foods.forEach((food: any, index: number) => {
      const requiredFoodFields = ['name', 'quantity', 'calories', 'protein', 'carbs', 'fat'];
      for (const field of requiredFoodFields) {
        if (food[field] === undefined || food[field] === null) {
          throw new Error(`Missing field ${field} in food item ${index}`);
        }
      }
    });

    this.logger.debug('‚úÖ Nutrition analysis validation passed');
  }

  async testConnection(): Promise<boolean> {
    try {
      this.logger.log('Testing Google AI API connection...');
      
      const testAnalysis = await this.analyzeTextFood('1 —è–±—ä–ª–∫–∞');
      
      if (testAnalysis && testAnalysis.totalCalories > 0) {
        this.logger.log('‚úÖ Google AI API connection test successful');
        return true;
      }
      
      return false;
    } catch (error) {
      this.logger.error('‚ùå Google AI API connection test failed:', error.message);
      return false;
    }
  }
}